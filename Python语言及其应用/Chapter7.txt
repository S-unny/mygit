

7.1		文本字符串
			unicodedata模块
				lookup()	接受不区分大小写的标准名称，返回一个unicode字符
				name()		接受一个unicode字符，返回大写形式的名称
				
				>>> import unicodedata
				>>> unicodedata.name('A')
				'LATIN CAPITAL LETTER A'
				>>> unicodedata.name('\u00a2')
				'CENT SIGN'
				>>> unicodedata.lookup('CENT SIGN')
				'¢'

				>>> place = 'caf\u00e9'  	#通过编码指定字符
				>>> place
				'café'
				>>> place = 'caf\N{LATIN SMALL LETTER E WITH ACUTE}' #通过字符名称指定字符
				>>> place
				'café'						#因为指定的是某个字符，所以可以直接插入，或者拼接
			UTF-8编码和解码
				编码:将字符串转化为一系列字节的过程

				str.encode(encoding='UTF-8',errors='strict')
				可选的编码方式
				编码					说明
				ascii				经典的7比特ASCII编码
				utf-8				最常用的以8比特为单位的边长编码
				latin-1				也被称为ISO 8859-1编码
				cp-1252				Windows常用编码
				Unicode-escape		python 中Unicode 的转义文本格式，\uxxxx或者\uxxxxxxxx
				
				第二个参数可选： ignore replace backslashreplace xmlcharrefrepalce
				>>> snowman = '\u2603'
				>>> len(snowman)		#对于字符指的是字符的个数
				1
				>>> ds = snowman.encode('utf-8')  #####
				>>> len(ds)				#对于字节序列来说指的是字节数
				3
				>>> snowman
				'☃'
				>>> ds
				b'\xe2\x98\x83'

				解码: 将字节序列转化为unicode字符串的过程

				bytes.decode(encoding="utf-8", errors="strict")
				>>> ds.decode('utf-8')
				'☃'
			格式化输出
				old style
				转换类型
				%s 				字符串
				%d 				十进制整数
				%x 				十六进制整数
				%o 				八进制整数
				%f				十进制浮点数
				%e 				以科学计数法表示的浮点数
				%g				十进制或科学计数法表示的浮点数
				%%				%

				>>> cat = 'aa'
				>>> weight = 25
				>>> "our cat %s weighs %s pounds" %(cat,weight)
				'our cat aa weighs 25 pounds'

				>>> n = 42
				>>> f = 7.03
				>>> s = 'string cheese'
				>>> '%-10d %-10f %-10s' %(n,f,s)  #- 左对齐 10 域宽 
				'42         7.030000   string cheese'
				>>> '%10.4d %10.4f %10.4s' %(n,f,s)#  .4对于字符串来说是最大字符数，对于浮点数来说是小数点后4
				'      0042     7.0300       stri'

				new style
					>>> '{2} {0} {1}'.format(f,s,n)
					'42 7.03 string cheese'
					>>> '{a} {b} {c}'.format(a=42,b=7.03,c='string cheese')
					'42 7.03 string cheese'
					>>> d = {'n': 42,'f': 7.03,'s': 'string cheese'}
					>>> '{0[n]} {0[f]} {0[s]} {1}'.format(d,'other')
					'42 7.03 string cheese other'

					指定参数格式
					>>> '{0:d} {1:f} {2:s}'.format(n,f,s)
					'42 7.030000 string cheese'
					>>> '{a:d} {b:f} {c:s}'.format(a=42,b=7.03,c='string cheese')
					'42 7.030000 string cheese'
					>>> '{0:10d} {1:10f} {2:10s}'.format(n,f,s)  		#域宽，右对齐（默认）
					'        42   7.030000 string cheese'
					>>> '{0:>10d} {1:>10f} {2:>10s}'.format(n,f,s)		#右对齐
					'        42   7.030000 string cheese'
					>>> '{0:<10d} {1:<10f} {2:<10s}'.format(n,f,s)		#左对齐
					'42         7.030000   string cheese'
					>>> '{0:^10d} {1:^10f} {2:^10s}'.format(n,f,s)		#居中
					'    42      7.030000  string cheese'
					>>> '{0:>10d} {1:>10.4f} {2:>10.4s}'.format(n,f,s)	#精度设置，整型无法设置精度
					'        42     7.0300       stri'
					>>> '{0:!^10d} {1:@^10f} {2:#^10s}'.format(n,f,s)	#设置填充字符
					'!!!!42!!!! @7.030000@ string cheese'

				使用正则表达式
					match()的使用
						>>> import re
						>>> source = 'Young Frankenstein'
						>>> m = re.match('You',source)		# source 是以You开头的么？
						>>> if m:
						... 	print(m.group())
						... 
						You
						>>> m = re.match('.*Frank',source)  # .表示任意一个字符，*表示0个或多个前面的字符
						>>> if m:
						... 	print(m.group())
						... 
						Young Frank
					search()的使用
						>>> m = re.search('Frank',source)	#返回第一次成功的匹配（如果存在）
						>>> if m:
						... 	print(m.group())
						... 
						Frank
					findall()的使用
						>>> m = re.findall('n',source)  	#返回所有的匹配项
						>>> m
						['n', 'n', 'n', 'n']
					split()按匹配切分
						>>> m
						['You', 'g Fra', 'ke', 'stei', '']
					使用sub()替换匹配
						>>> m = re.sub('n','?',source)
						>>> m
						'You?g Fra?ke?stei?'

					特殊字符
						\d 			一个数字字符
						\D 			一个非数字字符
						\w 			一个字母或数字或下划线字符
						\W 			一个非字母非数字非下划线字符
						\s 			空白符
						\S 			非空白符
						\b 			单词边界(一个\w与一个\W之间的范围，顺序可逆)
						\B 			非单词边界

					模式标示符
						abc 			文本值abc
						(expr) 			expr
						espr1|expr2 	expr1或expr2
						. 				除\n外的任何字符
						^ 				从源字符串的开头匹配
						$ 				从源字符串的结尾匹配
						prev? 			0个或者1个prev
						prev*			0个或者多个prev，尽可能多的匹配
						prev*?			0个或者多个prev，尽可能少的匹配
						prev+			1个或者多个prev，尽可能多的匹配
						prev+?			1个或者多个prev，尽可能少的匹配
						prev{m}			m个连续的prev
						prev{m,}		大于等于m个连续的prev
						prev{m,n}		m到n个prev，尽可能多的匹配
						prev{m,n}?		m到n个prev，尽可能少的匹配
						[abc] 			a或b或c
						[^abc]			非(a或b或c)
						prev(?=next) 	如果后面为next，则返回prev
						prev(?!=next) 	如果后面非next，则返回prev
						(?<=prev)next   如果前面为prev，则返回next
						(?<!prev)next 	如果前面非prev，则返回next

					例子
						>>> import re
						>>> source = '''I wish I may, I wish I might
						... Have a dish of fish tonight.'''
						>>> re.findall('wish',source)				#在source中查找wish
						['wish', 'wish']
						>>> re.findall('wish|fish',source)			#查找wish或fish
						['wish', 'wish', 'fish']
						>>> re.findall('^wish',source)				#从开始查找wish
						[]
						>>> re.findall('^I wish',source)			#从开始查找I wish
						['I wish']
						>>> re.findall('fish$',source)				#从结尾查找fish
						[]
						>>> re.findall('fish tonight.$',source)		#从结尾查找fish tonight.，但是里面的.代表的是任何字符的意思
						['fish tonight.']
						>>> re.findall('fish tonight\.$',source)	#\.转义为.（句号）
						['fish tonight.']
						>>> re.findall('[wf]ish',source)			#查找wish或者fish
						['wish', 'wish', 'fish']
						>>> re.findall('[wsh]+',source)				#查找一个或多个wsh字母组成的
						['w', 'sh', 'w', 'sh', 'h', 'sh', 'sh', 'h']
						>>> re.findall('ght\W',source)				#查找ght后接一个非字母非数字非下划线的匹配
						['ght\n', 'ght.']
						>>> re.findall('\bfish',source)				#由于\b转义为退格，所以匹配不到
						[]
						>>> re.findall(r'\bfish',source)			#r进制转义，因此可以匹配到单个的fish
						['fish']
						>>> m = re.search(r'(. dish\b).*(\bfish)',source)
						>>> m.group()								#m.group()包含了匹配的所有
						'a dish of fish'
						>>> m.groups()								#m.groups()只包含了括号中的部分
						('a dish', 'fish')
						>>> m = re.search(r'(?P<DISH>. dish\b).*(?P<FISH>\bfish)',source)
						>>> m.group()
						'a dish of fish'
						>>> m.groups()
						('a dish', 'fish')
						>>> m.group('DISH')
						'a dish'
						>>> m.group('FISH')
						'fish'

						匹配三个元音的单词
						re.findall(r'\b(?:(?:(?![aoeiu])[a-z])*[aoeiu]){3}(?:(?![aoeiu])[a-z])*\b',mammoth)
						匹配辅音（0或多个）
						(?:(?![aoeiu])[a-z])*		#?:表示不捕获 (?![aoeiu])[a-z] 表示a-z中非aoeiu的字母，小括号中不捕获
																(?=[a-z])[aoeiu] 表示取出a-z中的aoeiu
						匹配连着的三个元音
						>>> re.findall(r'(?:(?=[a-z])[aoeiu]){3}',mammoth)
						['uee', 'uie', 'eau', 'uee', 'uee', 'uee']

		二进制数据
			字节是不可变的，像字节数据组成的元组
			字节数组是可变的，像字节数据组成的列表
				>>> blist = [1,2,3,255]
				>>> the_bytes = bytes(blist) #字节
				>>> the_bytes
				b'\x01\x02\x03\xff'
				>>> the_byte_array = bytearray(blist)  #字节数组
				>>> the_byte_array
				bytearray(b'\x01\x02\x03\xff')
				>>> the_byte_array[1] = 127
				>>> the_byte_array
				bytearray(b'\x01\x7f\x03\xff')
				>>> the_bytes[1] = 127
				Traceback (most recent call last):
				  File "<stdin>", line 1, in <module>
				TypeError: 'bytes' object does not support item assignment
				
			二进制数据工具
				标准库中 struct模块
				第三方   bitstring 	construct 	bachoir		binio