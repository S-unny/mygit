5.2 	命令行参数
			python 文件为第一个参数
5.3		模块导入
			import random
			import random as rd
			引用
			random.choice
			rd.choice

			from random import choice
			from random import choice as choi
			引用
			choice()
			choi()

			其中，导入位置顺序与sys.path中的顺序一致
			如果两个位置都有要导入的模块，则导入前面那个

5.4 	包	包是一个含有init.py的文件夹
			假设主程序是boxes/weather.py
			包是 	  boxes/source
			其中包含   boxes/	source/weekly.py
					  boxes/source/daily.py
					  boxes/source/init.py
			在weather.py 中可以通过
					  from source import daily,weekly
					  来导入daily.py 和 weekly.py 

5.5		Python 标准库	
			使用setdefault()处理缺失的键
				1 键如果不存在，则添加进去，并返回添加的值
				2 键如果存在，则不改变原来的值，并返回原来的值
				periodic_table = {'Hydrogen': 1,'Helium': 2}
				print(periodic_table)
				carbon = periodic_table.setdefault('carbon',12)
				print(carbon)
				Helium = periodic_table.setdefault('Helium',222)
				print(Helium)

				out:
				{'Hydrogen': 1, 'Helium': 2}
				12
				2
			使用defaultdict()对新键指定默认值
				from collections import defaultdict
				def no_idea():
					return 'Huh?'  

				shop = defaultdict(no_idea)	#对于不存在的键则将no_idea()返回的值做为值
				shop['A'] = 'Clothes'
				shop['B'] = 'food'
				print(shop)
				print(shop['A'],shop['B'])
				print(shop['C'])

				out：defaultdict(<function no_idea at 0x7f34856d0f28>, {'B': 'food', 'A': 'Clothes'})
				Clothes food
				Huh?

				使用defaultdict()实现计算功能
				from collections import defaultdict
				food_counter = defaultdict(int)		#int返回0做为值 ,list()返回控列表[],dict()返回空字典{}
				for food in ['spam','spam','spam','eggs']:
					food_counter[food] +=1
				for food,count in food_counter.items():
					print(food,count)


			使用counter计数
				from collections import Counter
				breakfast = ['spam','spam','spam','eggs']
				breakfast_counter = Counter(breakfast)
				print(breakfast_counter)

				print(breakfast_counter.most_common()) #降序返回所有元素，包含元组的列表

				lunch = ['eggs','eggs','bacon']
				lunch_counter = Counter(lunch)
				print(lunch_counter)

				print(breakfast_counter+lunch_counter)		#对应键的值相加
				print(breakfast_counter-lunch_counter)		#对应键的值相减，小于等于0则去掉？
				print(breakfast_counter&lunch_counter)		#交集，取小的值
				print(breakfast_counter|lunch_counter)		#并集,取大的值

				out:
				Counter({'spam': 3, 'eggs': 1})
				[('spam', 3), ('eggs', 1)]
				Counter({'eggs': 2, 'bacon': 1})
				Counter({'spam': 3, 'eggs': 3, 'bacon': 1})
				Counter({'spam': 3})
				Counter({'eggs': 1})
				Counter({'spam': 3, 'eggs': 2, 'bacon': 1})

			使用有序字典OrderedDict()给字典的键排序
				from collections import OrderedDict
				quotes = OrderedDict([('A',1),('B',2),('C',3)])
				for x in quotes:
					print(x)

				out:
				A
				B
				C
			双端队列，栈+队列
				deque()生成一个双端的队列，可以从序列的任何一端添加和删除项

				def palindrome(word):				#更简单的判断回文序列可以翻转比较（切片）
					from collections import deque
					dq = deque(word)				#生成一个双端序列
					while len(dq)>1:
						if dq.popleft()!=dq.pop():	#可以在左右两端取项
							return False
					return True

				print(palindrome('aba'))

			itertools 的应用